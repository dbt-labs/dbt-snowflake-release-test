name: Build, Test, and Package

on:
  workflow_call:
    inputs:
      sha:
        description: "The last commit sha in the release"
        type: string
        required: true
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        type: string
        required: true

permissions:
  contents: write # this is the permission that allows creating a new release

env:
  PYTHON_TARGET_VERSION: 3.8
  ARTIFACT_RETENTION_DAYS: 1

defaults:
  run:
    shell: bash

jobs:
  log-inputs:
    name: Log Inputs
    runs-on: ubuntu-latest
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          echo The last commit sha in the release: ${{ inputs.sha }}
          echo The release version number:         ${{ inputs.version_number }}
          echo Python target version:              ${{ env.PYTHON_TARGET_VERSION }}
          echo Artifact retention days:            ${{ env.ARTIFACT_RETENTION_DAYS }}

  unit:
    name: Unit Test

    runs-on: ubuntu-latest

    env:
      TOXENV: "unit"

    steps:
      - name: "Checkout Commit - ${{ inputs.sha }}"
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ github.event.inputs.sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install tox
          python -m pip --version
          python -m tox --version

      - name: "Run Tox"
        run: tox

  build:
    name: Build Packages

    runs-on: ubuntu-latest

    outputs:
      is_alpha: ${{ steps.check-is-alpha.outputs.is_alpha }}

    steps:
      - name: "Checkout Commit - ${{ inputs.sha }}"
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ inputs.sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade setuptools wheel twine check-wheel-contents
          python -m pip --version

      - name: "Build Distributions"
        run: ./scripts/build-dist.sh

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Check Distribution Descriptions"
        run: |
          twine check dist/*

      - name: "[DEBUG] Check Wheel Contents"
        run: |
          check-wheel-contents dist/*.whl --ignore W007,W008

      - name: "Check If This Is An Alpha Version"
        id: check-is-alpha
        run: |
          export is_alpha=0
          if [[ "$(ls -lh dist/)" == *"a1"* ]];
          then
          export is_alpha=1;
          fi
          echo "is_alpha=$is_alpha" >> $GITHUB_OUTPUT

      - name: "Upload Build Artifact - ${{ inputs.version_number }}"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: |
            dist/
            !dist/dbt-${{ inputs.version_number }}.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  test-build:
    name: Verify Packages

    if: needs.build.outputs.is_alpha == 0

    needs: [unit, build]

    runs-on: ubuntu-latest

    steps:
      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade wheel
          python -m pip --version

      - name: "Download Build Artifact - ${{ inputs.version_number }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: dist/

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Install Wheel Distributions"
        run: |
          find ./dist/*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/

      - name: "[DEBUG] Check Wheel Distributions"
        run: |
          dbt --version

      - name: "Install Source Distributions"
        run: |
          find ./dist/*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/

      - name: "[DEBUG] Check Source Distributions"
        run: |
          dbt --version
