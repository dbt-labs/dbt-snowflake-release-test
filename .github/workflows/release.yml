# **what?**
# Take the given commit, run unit tests specifically on that sha, build and
# package it, and then release to GitHub and PyPi with that specific build

# **why?**
# Ensure an automated and tested release process

# **when?**
# This will only run manually with a given sha, version, and changelog_path

name: Release to GitHub and PyPi

on:
  workflow_dispatch:
    inputs:
      sha:
        description: "The last commit sha in the release"
        required: true
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        required: true
      changelog_path:
        description: "Path to changes log"
        type: string
        default: "./CHANGELOG.md"
        required: false
      test_run:
        description: "Test run (Publish release as draft)"
        type: boolean
        default: false
        required: false

permissions:
  contents: write # this is the permission that allows creating a new release

jobs:
  log-inputs:
    name: Log Inputs
    runs-on: ubuntu-latest
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          echo The last commit sha in the release: ${{ inputs.sha }}
          echo The release version number:         ${{ inputs.version_number }}
          echo Expected Changlog path:             ${{ inputs.changelog_path }}
          echo Test run:                           ${{ inputs.test_run }}

  build-test-package:
    name: Build, Test, and Package

    uses: dbt-labs/dbt-snowflake-release-test/.github/workflows/build-test-package.yml@main

    with:
      sha: ${{ inputs.sha }}
      version_number: ${{ inputs.version_number }}

  github-release:
    name: GitHub Release

    needs: build-test-package

    uses: dbt-labs/dbt-release/.github/workflows/github-release.yml@main

    with:
      sha: ${{ inputs.sha }}
      version_number: ${{ inputs.version_number }}
      changelog_path: ${{ inputs.changelog_path }}
      test_run: ${{ inputs.test_run }}

  pypi-release:
    if: ${{ !inputs.test_run }}

    name: Pypi Release

    runs-on: ubuntu-latest

    needs: github-release

    environment: PypiProd

    steps:
      - name: "Download Build Artifact - ${{ inputs.version_number }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: "dist"

      - name: "Publish Distribution To Pypi"
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
